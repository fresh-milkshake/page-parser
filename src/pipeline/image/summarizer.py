import base64
import time
from typing import Optional

from openai import OpenAI

from src.common.logging import get_logger
from src.config.prompts import DEFAULT_VISION_PROMPT

logger = get_logger(__name__)


class ChartSummarizer:
    """
    Summarizes and exports data from charts and diagrams in a given image using OpenAI's vision models.

    Attributes:
        model_name (str): The name of the OpenAI model to use.
        openai_api_key (str): The API key for OpenAI.
        openai_base_url (str): The base URL for the OpenAI API.
        retries (int): Number of times to retry the request on failure.
        timeout (int): Timeout for each request in seconds.
    """

    def __init__(
        self,
        model_name: str,
        api_key: str,
        base_url: str,
        retries: int,
        timeout: int,
    ) -> None:
        """
        Initialize the ChartSummarizer.

        Args:
            model_name (str): The OpenAI model to use for vision tasks.
            api_key (str): The OpenAI API key.
            base_url (str): The base URL for the OpenAI API.
            retries (int): Number of times to retry the request on failure.
            timeout (int): Timeout for each request in seconds.
        """
        logger.info(f"Initializing ChartSummarizer with model: {model_name}")
        self.model_name = model_name
        self.retries = retries
        self.timeout = timeout
        config = {}
        if api_key:
            config["api_key"] = api_key
        if base_url:
            config["base_url"] = base_url
        self.client = OpenAI(**config)
        logger.info("ChartSummarizer initialized successfully")

    def summarize_charts_from_page(
        self,
        image_path: str,
        prompt: Optional[str] = None,
        extra_context: Optional[str] = None,
    ) -> str:
        """
        Summarize charts found in the given image using the vision model.

        Args:
            image_path (str): Path to the image file (e.g., a page with charts or diagrams).
            prompt (Optional[str]): Custom prompt for the model.
            extra_context (Optional[str]): Additional context to provide to the model.

        Returns:
            str: The summary generated by the model.

        Raises:
            RuntimeError: If OpenAI API is not available or the request fails.
        """
        logger.debug(f"Summarizing charts from image: {image_path}")

        if prompt is None:
            prompt = DEFAULT_VISION_PROMPT
            logger.debug("Using default chart summarization prompt")
        else:
            logger.debug("Using custom prompt for summarization")

        if extra_context:
            prompt = f"{prompt}\n\n{extra_context}"
            logger.debug("Added extra context to prompt")

        logger.debug("Loading image file")
        try:
            with open(image_path, "rb") as image_file:
                image_bytes = image_file.read()
        except Exception as exc:
            logger.error(f"Failed to read image file: {exc}")
            raise RuntimeError(f"Failed to read image file: {exc}") from exc

        image_b64 = base64.b64encode(image_bytes).decode("utf-8")

        last_exception: Optional[Exception] = None
        for attempt in range(1, self.retries + 1):
            try:
                logger.debug(
                    f"Sending request to model: {self.model_name} (attempt {attempt}/{self.retries})"
                )
                response = self.client.chat.completions.create(
                    model=self.model_name,
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": prompt},
                                {
                                    "type": "image_url",
                                    "image_url": {
                                        "url": f"data:image/png;base64,{image_b64}"
                                    },
                                },
                            ],
                        }
                    ],
                )
                result = response.choices[0].message.content if response.choices else ""
                logger.debug("Successfully received response from OpenAI")
                return result.strip() if result else ""
            except Exception as exc:
                logger.warning(
                    f"Attempt {attempt} failed to summarize charts: {exc}"
                )
                last_exception = exc
                if attempt < self.retries:
                    time.sleep(self.timeout)
        logger.error(f"Failed to summarize charts after {self.retries} attempts: {last_exception}")
        raise RuntimeError(f"Failed to summarize charts: {last_exception}") from last_exception