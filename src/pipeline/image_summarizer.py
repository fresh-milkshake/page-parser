import ollama

from src.common.logging import get_logger

logger = get_logger(__name__)


class ChartSummarizer:
    """
    Summarizes and exports data from charts and diagrams in a given image using Ollama's Gemma 3 vision model.

    Attributes:
        model_name (str): The name of the Ollama model to use.
        ollama_host (str): The host address for the Ollama server.
    """

    def __init__(
        self,
        model_name: str = "gemma3",
        ollama_host: str = "http://localhost:11434",
    ) -> None:
        """
        Initialize the ChartSummarizer.

        Args:
            model_name (str): The Ollama model to use for vision tasks.
            ollama_host (str): The Ollama server host.
        """
        logger.info(f"Initializing ChartSummarizer with model: {model_name}")
        logger.info(f"Ollama host: {ollama_host}")
        self.model_name = model_name
        self.client = ollama.Client(host=ollama_host)
        logger.info("ChartSummarizer initialized successfully")

    def summarize_charts_from_page(
        self,
        image_path: str,
        prompt: str | None = None,
        extra_context: str | None = None,
    ) -> str:
        """
        Summarize charts found in the given image using the vision model.

        Args:
            image_path (str): Path to the image file (e.g., a page with charts or diagrams).
            prompt (Optional[str]): Custom prompt for the model.
            extra_context (Optional[str]): Additional context to provide to the model.

        Returns:
            str: The summary generated by the model.

        Raises:
            RuntimeError: If Ollama is not available or the request fails.
        """
        logger.debug(f"Summarizing charts from image: {image_path}")

        if prompt is None:
            prompt = (
                "Summarize the image. Identify and list each chart, graph, or diagram, stating its type and key insights. "
                "Highlight notable data points. If possible, extract any tabular data in Markdown or CSV. "
                "Begin with an overall summary. Do not include any unrelated text or your thinking process."
            )
            logger.debug("Using default chart summarization prompt")
        else:
            logger.debug("Using custom prompt for summarization")

        if extra_context:
            prompt = f"{prompt}\n\n{extra_context}"
            logger.debug("Added extra context to prompt")

        try:
            logger.debug("Loading image file")
            with open(image_path, "rb") as image_file:
                image_bytes = image_file.read()

            logger.debug(f"Sending request to Ollama model: {self.model_name}")
            response = self.client.generate(
                model=self.model_name,
                prompt=prompt,
                images=[image_bytes],
            )
            result = response.get("response", "")
            logger.debug("Successfully received response from Ollama")
            return result.strip()
        except Exception as exc:
            logger.error(f"Failed to summarize charts: {exc}")
            raise RuntimeError(f"Failed to summarize charts: {exc}") from exc


if __name__ == "__main__":
    summarizer = ChartSummarizer()
    summary = summarizer.summarize_charts_from_page("data/image.png")
    print(summary)
